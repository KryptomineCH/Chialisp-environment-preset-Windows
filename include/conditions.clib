; https://chialisp.com/docs/coins_spends_and_wallets#conditions
(
    ; This spend is only valid if the attached aggregated signature contains a signature from the given public key of the given message. 
    ; This is labeled unsafe because if you sign a message once, any other coins you have that require that signature may potentially also be unlocked. 
    ; It's probably better just to use AGG_SIG_ME because of the natural entropy introduced by the coin ID.
    ; (AGG_SIG_UNSAFE pubkey message)
    (defconstant AGG_SIG_UNSAFE 49)
    ; This spend is only valid if the attached aggregated signature contains a signature from the specified public key of that message,
    ; concatenated with the coin's ID and the network's genesis challenge.
    ; (AGG_SIG_ME pubkey message)
    (defconstant AGG_SIG_ME 50)
    ; If this spend is valid, then create a new coin with the given puzzlehash and amount.
    ; The final argument list is used for hinting. See FAQ (https://chialisp.com/docs/faq) for more info.
    ; (CREATE_COIN puzzlehash amount (memo memo ...))
    (defconstant CREATE_COIN 51)
    ; This spend is only valid if there is unused value in this transaction greater than or equal to amount, which is explicitly to be used as the fee.
    ; (RESERVE_FEE amount)
    (defconstant RESERVE_FEE 52)

    ; If this spend is valid, this creates an ephemeral announcement with an ID dependent on the coin that creates it. 
    ; Other coins can then assert an announcement exists for inter-coin communication inside a block.
    ; (CREATE_COIN_ANNOUNCEMENT message)
    (defconstant CREATE_COIN_ANNOUNCEMENT 60)
    ; This spend is only valid if there was an announcement in this block matching the announcementID. 
    ; The announcementID is the hash of the message that was announced concatenated with the coin ID of the coin that announced it.
    ; announcementID == sha256(coinID + message).
    ; (ASSERT_COIN_ANNOUNCEMENT announcementID)
    (defconstant ASSERT_COIN_ANNOUNCEMENT 61)
    ; If this spend is valid, this creates an ephemeral announcement with an ID dependent on the puzzle that creates it. 
    ; Other coins can then assert an announcement exists for inter-coin communication inside a block.
    ; (CREATE_PUZZLE_ANNOUNCEMENT message)
    (defconstant CREATE_PUZZLE_ANNOUNCEMENT 62)
    ; This spend is only valid if there was an announcement in this block matching the announcementID.
    ; The announcementID is the message that was announced concatenated with the puzzle hash of the coin that announced it.
    ; announcementID == sha256(puzzle_hash + message).
    ; (ASSERT_PUZZLE_ANNOUNCEMENT announcementID)
    (defconstant ASSERT_PUZZLE_ANNOUNCEMENT 63)

    ; This spend is only valid if the presented coin ID is exactly the same as the ID of the coin that contains this puzzle.
    ; (ASSERT_MY_COIN_ID coinID)
    (defconstant ASSERT_MY_COIN_ID 70)
    ; This spend is only valid if the presented parent coin info is exactly the same as the parent coin info of the coin that contains this puzzle.
    ; (ASSERT_MY_PARENT_ID parentID)
    (defconstant ASSERT_MY_PARENT_ID 71)
    ; This spend is only valid if the presented puzzle hash is exactly the same as the puzzle hash of the coin that contains this puzzle.
    ; (ASSERT_MY_PUZZLEHASH puzzlehash)
    (defconstant ASSERT_MY_PUZZLEHASH 72)
    ; This spend is only valid if the presented amount is exactly the same as the amount of the coin that contains this puzzle.
    ; (ASSERT_MY_AMOUNT amount)
    (defconstant ASSERT_MY_AMOUNT 73)

    ; This spend is only valid if the given time has passed since this coin was created. 
    ; The coin's creation time or "birthday" is defined by the timestamp of the previous block not the actual block in which it was created. 
    ; Similarly, the previous block's timestamp is used as the current time when evaluating these time locks.
    ;(ASSERT_SECONDS_RELATIVE seconds)
    (defconstant ASSERT_SECONDS_RELATIVE 80)
    ; This spend is only valid if the timestamp on this block is greater than the specified timestamp. 
    ; Again, the coin's birthday and the current time are defined by the timestamp of the previous block.
    ; (ASSERT_SECONDS_ABSOLUTE time)
    (defconstant ASSERT_SECONDS_ABSOLUTE 81)
    ; This spend is only valid if the specified number of blocks have passed since this coin was created.
    ; (ASSERT_HEIGHT_RELATIVE block_age)
    (defconstant ASSERT_HEIGHT_RELATIVE 82)
    ; This spend is only valid if the given block_height has been reached.
    ; (ASSERT_HEIGHT_ABSOLUTE block_height)
    (defconstant ASSERT_HEIGHT_ABSOLUTE 83)

)